/* tamarin-prover should be used with --heuristic=i flag */

theory android
begin

builtins: hashing

functions: xor/2, xor_inv/2, cbc_enc/3, cbc_dec/3, null/0, enc_int/2, 
    dec_int/2, bottom/0

equations:
    xor_inv(xor(a, b), a) = b,
    xor_inv(xor(a, b), b) = a,
    xor(a, null) = a,
    dec_int(enc_int(m, k), k) = m,
    cbc_enc(m, c, k) = enc_int(xor(c, m), k),
    cbc_dec(cCurr, cPrev, k) = xor_inv(dec_int(cCurr, k), cPrev)


/* CBC Encryption */

rule CBCEncrypt:
    let
    // First encrypted block
    c1 = cbc_enc(head, ~c0, ~k)
    encryptedBlocks = <c1, ~c0, null> 
    in
    [
        // Request to encrypt blocks <head, tail>
        CBCEncrypt(token, <head, tail>),
        // IV
        Fr(~c0),
        // Encryption key
        Fr(~k)
    ]
    --[
        // The message being encrypted must contain at least two blocks
        NotEq(head, null),
        NotEq(tail, null),
        CBCEncrypt_Check(),
        CBCEncrypt_Token(token),
        CBCEncrypt_Tail(tail)
    ]->
    [ CBCEncryptIntermOut(token, encryptedBlocks, tail, ~k) ]

/* Rule that describes encryption of the next block */
rule CBCEncrypt_IntermidiateStep:
    let
    newEncryptedBlock = cbc_enc(head, prevBlock, k)
    encryptedBlocks = <newEncryptedBlock, prevBlock, encryptedRest>
    in
    [ CBCEncryptIntermOut(token, <prevBlock, encryptedRest>, <head, tail>, k) ]
    --[
        // If 'tail' is not null, then 'head' is not the last block to encrypt
        NotEq(tail, null),
        CBCEncrypt_IntermidiateStep_Check(),
        CBCEncrypt_IntermidiateStep_Token(token)
    ]->
    [ CBCEncryptIntermOut(token, encryptedBlocks, tail, k) ]

/* Rule that describes encryption of the last block */
rule CBCEncrypt_IntermidiateStep_Last:
    let
    lastEncryptedBlock = cbc_enc(head, prevBlock, k)
    encryptedBlocks = <lastEncryptedBlock, prevBlock, encryptedRest>
    in
    [ CBCEncryptIntermOut(token, <prevBlock, encryptedRest>, <head, tail>, k) ]
    --[
        // We know that 'head' is the last block to encrypt, if the next block,
        // 'tail' is null
        Eq(tail, null),
        CBCEncrypt_IntermidiateStep_Last_Check()
    ]->
    [ CBCEncrypt_Result(token, k, encryptedBlocks) ]


/* CBC Decryption */

rule CBCDecrypt:
    let
    newDecryptedBlock = cbc_dec(firstBlock, nextBlock, k)
    decryptedBlocks = <newDecryptedBlock, null>
    in
    [
        // Request to decrypt blocks 
        CBCDecrypt(token, k, <firstBlock, nextBlock, rest>) 
    ]
    --[
        // The message being decrypted must contain at least three blocks
        NotEq(firstBlock, null),
        NotEq(nextBlock, null),
        NotEq(rest, null),
        CBCDecrypt_Check()
    ]->
    [ CBCDecryptIntermOut(token, decryptedBlocks, <nextBlock, rest>, k) ]

/* Rule that describes decryption of the next block */
rule CBCDecrypt_IntermidiateStep:
    let
    newDecryptedBlock = cbc_dec(currBlock, previousBlock, k)
    decryptedBlocks = <newDecryptedBlock, prevDecryptedBlocks>
    in
    [
        CBCDecryptIntermOut(token, prevDecryptedBlocks, 
            <currBlock, previousBlock, rest>, k)
    ]
    --[
        NotEq(currBlock, null),
        NotEq(previousBlock, null),
        NotEq(rest, null)
    ]->
    [ CBCDecryptIntermOut(token, decryptedBlocks, <previousBlock, rest>, k) ]

/* Rule that describes decription of the last block */
rule CBCDecrypt_IntermidiateStep_Last:
    let
    newDecryptedBlock = cbc_dec(currBlock, previousBlock, k)
    decryptedBlocks = <newDecryptedBlock, prevDecryptedBlocks>
    in
    [
        CBCDecryptIntermOut(token, prevDecryptedBlocks, 
            <currBlock, previousBlock, rest>, k)
    ]
    --[
        NotEq(currBlock, null),
        NotEq(previousBlock, null),
        // We know that currBlock is the last to be decrypted if the block 
        // after 'previousBlock' is null
        Eq(rest, null),
        CBCDecrypt_IntermidiateStep_Last_Check()
    ]->
    [ CBCDecrypt_Result(token, decryptedBlocks) ]   


/* Encryption scenario for a sanity check */

rule Scenario_EncryptCBC:
    [
        Fr(~token),
        // You can try to add more message blocks, it's a whole lot of fun
        Fr(~m1),
        Fr(~m2),
        Fr(~m3),
        Fr(~m4)
    ]
    -->
    [
        CBCEncrypt(~token, <~m1, ~m2, ~m3, ~m4, null>),
        St_Scenario_EncryptCBC(~token)
    ]

/* Checking that a message was encrypted */
rule Scenario_EncryptCBC_Result:
    [
        St_Scenario_EncryptCBC(token),
        CBCEncrypt_Result(token, k, encryptedBlocks) 
    ]
    --[ Scenario_EncryptCBC_Result_Check() ]->
    [
        St_Scenario_EncryptCBC_Result(k, encryptedBlocks)
    ]


/* Decryption scenario of a sanity check */

rule Scenario_DecryptCBC:
    [
        // Depends of the message emit by the encryption scenario sanity
        // check
        St_Scenario_EncryptCBC_Result(k, encryptedBlocks),
        Fr(~token)
    ]
    --[ Scenario_DecryptCBC_Check() ]->
    [
        St_Scenario_DecryptCBC(~token),
        CBCDecrypt(~token, k, encryptedBlocks)
    ]


/* Model to prove that hash-then-CBC-Encrypt is not IND-CCA secure. */

/* 
    The model differs from the one given in the paper. In it Attacker is
    forgetful, so it does not memorize the messages passed to Oracle. 
    We could not prove the statement at hand for such a model; therefore, we 
    change A to be able to use memory, thus the messages passed between O and A
    changes for those in the paper. Conceptually, the attack stays the same.
*/

rule Attacker_ActivateOracle_Request:
    let
    // In our model the attacker memorizes m1 and m2, thus, there no need to
    // use the same hash
    m1 = <h(~m1), ~m1, null>
    m2 = <h(~m2), ~m2, null>
    in
    [
        Fr(~token),
        Fr(~m1),
        Fr(~m2)
    ]
    --[ Attacker_ActivateOracle_Request_Check() ]->
    [
        ActivateOracleRequest(~token, m1, m2),
        St_Attacker_ActivateOracle_Request(~token),
        // Attacker memory
        St_Attacker_ActivateMessages(~token, m1, m2)
    ]

/* Rule is used if Oracle encrypts the first message */
rule ActivateOracle_FirstMessage:
    [ ActivateOracleRequest(token, m1, m2) ]
    --[
        ActivateOracle_FirstMessage_Check(),
        ActivateOracle_FirstEncrypted(token)
    ]->
    [
        CBCEncrypt(token, <h(m1), m1>),
        St_ActivateOracle(token) 
    ]

/* Rule is used if Oracle encrypts the second message */
rule ActivateOracle_SecondMessage:
    [ ActivateOracleRequest(token, m1, m2) ]
    --[
        ActivateOracle_SecondMessage_Check(),
        ActivateOracle_SecondEncrypted(token)
    ]->
    [
        CBCEncrypt(token, <h(m2), m2>),
        St_ActivateOracle(token) 
    ]

rule ActivateOracle_Response:
    [
        St_ActivateOracle(token),
        CBCEncrypt_Result(token, k, encryptedBlocks)
    ]
    --[
        ActivateOracle_Response_Check(),
        ActivateOracle_Response_Token(token)
    ]->
    [
        // Save the used key in Oracle's local memory
        !OracleKey(token, k),
        // Send the result to attacker
        ActivateOracle_Result(token, encryptedBlocks)
    ]

rule Attacker_ActivateOracle_Response:
    let
    // New request to Oracle
    newCT = <c3, c2, c1, null>
    in
    [
        St_Attacker_ActivateOracle_Request(token),
        ActivateOracle_Result(token, <c3, c2, c1, c0, null>)
    ]
    --[ Attacker_ActivateOracle_Response_Check() ]->
    [ OracleDecrypt_Request(token, newCT) ]

rule OracleDecrypt_Request:
    [
        !OracleKey(token, key),
        OracleDecrypt_Request(token, newCT)
    ]
    -->
    [
        CBCDecrypt(token, key, newCT),
        St_OracleDecrypt_Request(token),
        St_AttackerDecrypt_Request(token)
    ]

rule OracleDecrypt_Response:
    [
        St_OracleDecrypt_Request(token),
        CBCDecrypt_Result(token, result)
    ]
    --[ OracleDecrypt_Response_Check() ]->
    [ OracleDecrypt_Response(token, result) ]

rule AttackerDecrypt_Response_FirstMessage:
    [
        OracleDecrypt_Response(token, result),
        St_AttackerDecrypt_Request(token),
        St_Attacker_ActivateMessages(token, m1, m2)
    ]
    --[
        AttackerDecryptFirst_Response_Check(),
        Eq(m1, result),
        AttackerGuessFirst(token)
    ]->
    []

rule AttackerDecrypt_Response_SecondMessage:
    [
        OracleDecrypt_Response(token, result),
        St_AttackerDecrypt_Request(token),
        St_Attacker_ActivateMessages(token, m1, m2)
    ]
    --[
        AttackerDecryptSecond_Response_Check(),
        Eq(m2, result),
        AttackerGuessSecond(token)
    ]->
    []

/* Model to prove that hash-then-CBC-Encrypt is not IND-CCA secure. */

/* 
   As given in the paper 
*/

rule Attacker_ActivateOracle_Request_E:
    let
    // In our model the attacker memorizes m1 and m2, thus, there no need to
    // use the same hash
    m1 = <h(~m1), ~m1, null>
    m2 = <h(~m1), ~m2, null>
    in
    [
        Fr(~token),
        Fr(~m1),
        Fr(~m2)
    ]
    --[ Attacker_ActivateOracle_Request_Check_E() ]->
    [
        ActivateOracleRequest_E(~token, m1, m2),
        St_Attacker_ActivateOracle_Request_E(~token)
    ]

/* Rule is used if Oracle encrypts the first message */
rule ActivateOracle_FirstMessage_E:
    [ ActivateOracleRequest_E(token, m1, m2) ]
    --[
        ActivateOracle_FirstMessage_Check_E(),
        ActivateOracle_FirstEncrypted_E(token)
    ]->
    [
        CBCEncrypt(token, <h(m1), m1>),
        St_ActivateOracle_E(token) 
    ]

/* Rule is used if Oracle encrypts the second message */
rule ActivateOracle_SecondMessage_E:
    [ ActivateOracleRequest_E(token, m1, m2) ]
    --[
        ActivateOracle_SecondMessage_Check_E(),
        ActivateOracle_SecondEncrypted_E(token)
    ]->
    [
        CBCEncrypt(token, <h(m2), m2>),
        St_ActivateOracle_E(token) 
    ]

rule ActivateOracle_Response_E:
    [
        St_ActivateOracle_E(token),
        CBCEncrypt_Result(token, k, encryptedBlocks)
    ]
    --[
        ActivateOracle_Response_Check_E(),
        ActivateOracle_Response_Token_E(token)
    ]->
    [
        // Save the used key in Oracle's local memory
        !OracleKey_E(token, k),
        // Send the result to attacker
        ActivateOracle_Result_E(token, encryptedBlocks)
    ]

rule Attacker_ActivateOracle_Response_E:
    let
    // New request to Oracle
    newCT = <c3, c2, c1, null>
    in
    [
        St_Attacker_ActivateOracle_Request_E(token),
        ActivateOracle_Result_E(token, <c3, c2, c1, c0, null>)
    ]
    --[ Attacker_ActivateOracle_Response_Check_E() ]->
    [ OracleDecrypt_Request_E(token, newCT) ]

rule OracleDecrypt_Request_E:
    [
        !OracleKey_E(token, key),
        OracleDecrypt_Request_E(token, newCT)
    ]
    -->
    [
        CBCDecrypt(token, key, newCT),
        St_OracleDecrypt_Request_E(token),
        St_AttackerDecrypt_Request_E(token)
    ]

rule OracleDecrypt_Response_E:
    let
    tailHash = h(tail)
    in
    [
        St_OracleDecrypt_Request_E(token),
        CBCDecrypt_Result(token, <head, tail, rest>)
    ]
    --[ 
        OracleDecrypt_Response_Check_E(),
        Eq(tailHash, head)
    ]->
    [ OracleDecrypt_Response_E(token, <head, tail, rest>) ]

rule OracleDecrypt_Response_Invalid_E:
    let
    tailHash = h(tail)
    in
    [
        St_OracleDecrypt_Request_E(token),
        CBCDecrypt_Result(token, <head, tail, rest>)
    ]
    --[ 
        OracleDecrypt_Response_Invalid_Check_E(),
        NotEq(tailHash, head)
    ]->
    [ OracleDecrypt_Response_E(token, bottom) ]

rule AttackerDecrypt_Response_E:
    [
        OracleDecrypt_Response_E(token, result),
        St_AttackerDecrypt_Request_E(token)
    ]
    --[
        NotEq(result, bottom),
        AttackerDecrypt_Response_Check_E(),
        AttackerGuessFirst_E(token)
    ]->
    []

rule AttackerDecrypt_Response_Invalid_E:
    [
        OracleDecrypt_Response_E(token, bottom),
        St_AttackerDecrypt_Request_E(token)
    ]
    --[
        AttackerDecrypt_Response_Invalid_Check_E(),
        AttackerGuessSecond_E(token)
    ]->
    []

restriction Eq: 
    "All x y #i. Eq(x, y) @ #i ==> x = y"

restriction NotEq:
    "All x y #i. NotEq(x, y) @ #i ==> not (x = y)"


/* Lemmas */

/* Sanity checks */

lemma Scenario_EncryptCBC_Result_Check:
    exists-trace
    "Ex #i. Scenario_EncryptCBC_Result_Check() @ #i"

lemma Scenario_DecryptCBC_Check:
    exists-trace
    "Ex #i. Scenario_DecryptCBC_Check() @ #i"

lemma Attacker_ActivateOracle_Request_Check:
    exists-trace
    "Ex #i. Attacker_ActivateOracle_Request_Check() @ #i"

lemma ActivateOracle_FirstMessage_Check:
    exists-trace
    "Ex #i. ActivateOracle_FirstMessage_Check() @ #i"

lemma ActivateOracle_SecondMessage_Check:
    exists-trace
    "Ex #i. ActivateOracle_SecondMessage_Check() @ #i"

lemma ActivateOracle_Response_Check:
    exists-trace
    "Ex #i. ActivateOracle_Response_Check() @ #i"

lemma Attacker_ActivateOracle_Response_Check:
    exists-trace
    "Ex #i. Attacker_ActivateOracle_Response_Check() @ #i"

lemma OracleDecrypt_Response_Check:
    exists-trace
    "Ex #i. OracleDecrypt_Response_Check() @ #i"

lemma AttackerDecryptFirst_Response_Check:
    exists-trace
    "Ex #i. AttackerDecryptFirst_Response_Check() @ #i"

lemma AttackerDecryptSecond_Response_Check:
    exists-trace
    "Ex #i. AttackerDecryptSecond_Response_Check() @ #i"


/* Model proofs */

lemma AttackerGuessFirst_OracleHasBeenActivated:
    "All token #i. AttackerGuessFirst(token) @ #i ==>
    Ex #j. ActivateOracle_Response_Token(token) @ #j & #j < #i"

lemma AttackerGuessSecond_OracleHasBeenActivated:
    "All token #i. AttackerGuessSecond(token) @ #i ==>
    Ex #j. ActivateOracle_Response_Token(token) @ #j & #j < #i"

lemma AttackerGuessFirst_AlwaysCorrect:
    "All token #i. AttackerGuessFirst(token) @ #i ==> 
    Ex #j. ActivateOracle_FirstEncrypted(token) @ #j & #j < #i &
    not (Ex #k. ActivateOracle_SecondEncrypted(token) @ #k)"

lemma AttackerGuessSecond_AlwaysCorrect:
    "All token #i. AttackerGuessSecond(token) @ #i ==>
    Ex #j. ActivateOracle_SecondEncrypted(token) @ #j & #j < #i &
    not (Ex #k. ActivateOracle_FirstEncrypted(token) @ #k)"


/* Paper model sanity checks*/

lemma OracleDecrypt_Response_Check_E:
    exists-trace
    "Ex #i. OracleDecrypt_Response_Check_E() @ #i"

lemma OracleDecrypt_Response_Invalid_Check_E:
    exists-trace
    "Ex #i. OracleDecrypt_Response_Invalid_Check_E() @ #i"

lemma AttackerDecrypt_Response_Check_E:
    exists-trace
    "Ex #i. AttackerDecrypt_Response_Check_E() @ #i"

lemma AttackerDecrypt_Response_Invalid_Check_E:
    exists-trace
    "Ex #i. AttackerDecrypt_Response_Invalid_Check_E() @ #i"


/* Paper model proofs */

lemma AttackerGuessFirst_OracleHasBeenActivated_E:
    "All token #i. AttackerGuessFirst_E(token) @ #i ==>
    Ex #j. ActivateOracle_Response_Token_E(token) @ #j & #j < #i"

lemma AttackerGuessSecond_OracleHasBeenActivated_E:
    "All token #i. AttackerGuessSecond_E(token) @ #i ==>
    Ex #j. ActivateOracle_Response_Token_E(token) @ #j & #j < #i"

lemma AttackerGuessFirst_AlwaysCorrect_E:
    "All token #i. AttackerGuessFirst_E(token) @ #i ==> 
    Ex #j. ActivateOracle_FirstEncrypted_E(token) @ #j & #j < #i &
    not (Ex #k. ActivateOracle_SecondEncrypted_E(token) @ #k)"

lemma AttackerGuessSecond_AlwaysCorrect_E:
    "All token #i. AttackerGuessSecond_E(token) @ #i ==>
    Ex #j. ActivateOracle_SecondEncrypted_E(token) @ #j & #j < #i &
    not (Ex #k. ActivateOracle_FirstEncrypted_E(token) @ #k)"

end
